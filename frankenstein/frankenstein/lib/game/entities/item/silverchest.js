ig.module(
	'game.entities.item.silverchest'
)
.requires(
	'game.entities.item.heartitem',
	'game.entities.item.golditem',
	'game.entities.item.stoneitem',
	'game.entities.item.clubitem',
	'game.entities.item.hatchetitem',
	'game.entities.item.pitchforkitem',
	'game.entities.item.hammeritem',
	'game.entities.item.potionitem',
	'game.entities.item.treasure'
)
.defines(function(){
	
// Generic treasure base class (not to be used on its own)
EntitySilverchest = EntityTreasure.extend({

	_wmIgnore: false,

	// Each silver chest belongs to a group, which is an integer from 1 through X (maybe 4?)
	// At certain pre-defined points throughout the game, a group number is selected,
	// and all silver chests reset.  The ones that aren't in that group don't show up at all.
	group: 1,

	name: "",	// auto-generated by the room name and the group number

	init: function( x, y, settings ) {
		this.parent( x, y, settings );
		
		this.addAnim( 'open', 0.1, [1] );

		if (ig.system.running) {
			// If this chest isn't in the current global group, delete it
			if (this.group != ig.game.treasure.silverGroup) {
				this.kill();
			}

			this.name = ig.game.currentLevelName + '.' + this.group;

			// Check if this chest was already opened
			if (ig.game.treasure.silverOpen.indexOf(this.name) != -1) {
				this.opened = true;
				this.currentAnim = this.anims.open;
			}
		}
	},

	// Spawn a random low-level item
	spawnItem: function() {
		var rand = Math.random();
		if (rand < 0.15) {
			ig.game.spawnEntity( EntityGolditem, this.pos.x + 10, this.pos.y, {dropped: true, direction: 0, value: 15} );
		} else if (rand < 0.3) {
			ig.game.spawnEntity( EntityHeartitem, this.pos.x + 10, this.pos.y, {dropped: true, direction: 0} );
		} else if (rand < 0.45) {
			ig.game.spawnEntity( EntityStoneitem, this.pos.x + 10, this.pos.y, {dropped: true, direction: 0} );
		} else if (rand < 0.6) {
			ig.game.spawnEntity( EntityClubitem, this.pos.x + 10, this.pos.y, {dropped: true, direction: 0} );
		} else if (rand < 0.69) {
			ig.game.spawnEntity( EntityGolditem, this.pos.x + 10, this.pos.y, {dropped: true, direction: 0, value: 25} );
		} else if (rand < 0.78) {
			ig.game.spawnEntity( EntityPitchforkitem, this.pos.x + 10, this.pos.y, {dropped: true, direction: 0} );
		} else if (rand < 0.87) {
			ig.game.spawnEntity( EntityPotionitem, this.pos.x + 10, this.pos.y, {dropped: true, direction: 0} );
		} else if (rand < 0.96) {
			ig.game.spawnEntity( EntityHatchetitem, this.pos.x + 10, this.pos.y, {dropped: true, direction: 0} );
		} else if (rand < 0.98) {
			ig.game.spawnEntity( EntityGolditem, this.pos.x + 10, this.pos.y, {dropped: true, direction: 0, value: 100} );
		} else {
			ig.game.spawnEntity( EntityHammeritem, this.pos.x + 10, this.pos.y, {dropped: true, direction: 0} );
		}
	},

	open: function() {
		this.currentAnim = this.anims.open;
		ig.game.treasure.silverOpen.push(this.name);
		this.parent();
	}
});

});